import hashlib
import os
from PyQt5.QtWidgets import (QApplication, QLineEdit, QPushButton, QGridLayout, QWidget, QFileDialog,
                             QMessageBox, QTextEdit, QTabWidget, QVBoxLayout)
from PyQt5.QtGui import QIcon
from PyQt5.QtGui import QPixmap
from base64 import b64decode
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QDragEnterEvent, QDropEvent, QFont
from PyQt5.QtWidgets import QShortcut
from PyQt5.QtCore import Qt

# This is a custom LineEdit that allows for dropping files into it.
class FileLineEdit(QLineEdit):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setAcceptDrops(True)  # Enable drop functionality

    # If the event has URLs (i.e., file paths), accept it
    def dragEnterEvent(self, event: QDragEnterEvent):
        if event.mimeData().hasUrls():
            event.acceptProposedAction()

    # When a file is dropped, set the file path as the line edit's text
    def dropEvent(self, event: QDropEvent):
        urls = event.mimeData().urls()
        if len(urls) > 0:
            self.setText(urls[0].toLocalFile())

# Open a file dialog to allow for file selection
def select_file_or_directory():
    filename, _ = QFileDialog.getOpenFileName(None, "Select file or directory", "", "All Files (*)")
    if filename:
        directory.setText(filename)

# Calculate the SHA-256 checksum of a file
def sha256_checksum(filename, block_size=65536):
    sha256 = hashlib.sha256()
    with open(filename, 'rb') as f:
        for block in iter(lambda: f.read(block_size), b''):
            sha256.update(block)
    return sha256.hexdigest()

# Hash a file using the above checksum function
def hash_file(file_path):
    return sha256_checksum(file_path)

# Hash a directory by hashing all its files and updating the directory hash with each file's hash
def hash_directory(directory_path):
    dir_hash = hashlib.sha256()
    for root, dirs, files in os.walk(directory_path):
        for file in sorted(files):
            file_path = os.path.join(root, file)
            file_hash = hash_file(file_path)
            dir_hash.update(file_hash.encode())
    return dir_hash.hexdigest()

# Get the SHA-256 hash of a file or directory and display it
def check_sha():
    if not directory.text():
        QMessageBox.critical(None, "Error", "File or directory must be set")
        return

    try:
        if os.path.isfile(directory.text()):
            hash_value = hash_file(directory.text())
        elif os.path.isdir(directory.text()):
            hash_value = hash_directory(directory.text())
        else:
            QMessageBox.critical(None, "Error", "The input path is not a file or directory")
            return
        hash_display.setPlainText(hash_value)
    except Exception as e:
        QMessageBox.critical(None, "Error", f"An error occurred during hash calculation: {e}")

# Compare two hash values and display a message indicating whether they're the same or not
def compare_hashes():
    if not hash1.text() or not hash2.text():
        QMessageBox.critical(None, "Error", "Both hash fields must be filled")
        return

    if hash1.text() == hash2.text():
        result_display.setPlainText("The hashes are identical.")
    else:
        result_display.setPlainText("The hashes are different.")

# Initialize the application and create the main widget
app = QApplication([])
root = QWidget()
root.setWindowTitle("SHA-256 Hash Check & Compare")

tab_widget = QTabWidget()

font = QFont("Arial", 10)
app.setFont(font)

app.setStyleSheet("""
    QWidget {
        background-color: #333;
        color: #fff;
    }

    QPushButton {
        background-color: #0082c8;
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 5px 10px;
    }

    QPushButton:hover {
        background-color: #4682B4;
    }

    QLineEdit, QTextEdit {
        background-color: #444;
        color: #ccc;
        border: 1px solid #5F9EA0;
        border-radius: 5px;
        padding: 5px;
        margin-bottom: 10px;
    }

    QTabWidget::pane {
        border: 1px solid #5F9EA0;
        background-color: #333;
    }

    QTabBar::tab {
        background-color: #0082c8;
        color: #fff;
        padding: 5px;
        border-top-left-radius: 5px;
        border-top-right-radius: 5px;
    }

    QTabBar::tab:selected {
        background-color: #4682B4;
    }
""")

ICON_B64 = """"""
pixmap = QPixmap()
pixmap.loadFromData(b64decode(ICON_B64))
icon = QIcon(pixmap)
root.setWindowIcon(icon)

# Tab for Hash Calculation
hash_tab = QWidget()
directory = FileLineEdit()
directory.setPlaceholderText("drag/select")

hash_layout = QGridLayout()
hash_layout.setContentsMargins(10, 10, 10, 10)
hash_layout.setSpacing(3)

hash_layout.addWidget(directory, 0, 0, 1, 2)

select_button = QPushButton("Select")
select_button.clicked.connect(select_file_or_directory)
hash_layout.addWidget(select_button, 0, 2)

hash_button = QPushButton("Check SHA-256")
hash_button.clicked.connect(check_sha)
hash_button_shortcut = QShortcut(Qt.Key_Return, hash_tab)
hash_button_shortcut.activated.connect(hash_button.click)
hash_layout.addWidget(hash_button, 1, 0, 1, 3)

hash_display = QTextEdit()
hash_display.setReadOnly(True)
hash_layout.addWidget(hash_display, 2, 0, 1, 3)

hash_tab.setLayout(hash_layout)
tab_widget.addTab(hash_tab, "Hash Calculation")

# Tab for Hash Comparison
compare_tab = QWidget()
hash1 = QLineEdit()
hash1.setPlaceholderText("First Hash")
hash2 = QLineEdit()
hash2.setPlaceholderText("Second Hash")

compare_layout = QGridLayout()
compare_layout.setContentsMargins(10, 10, 10, 10)
compare_layout.setSpacing(3)

compare_layout.addWidget(hash1, 0, 0)
compare_layout.addWidget(hash2, 1, 0)

compare_button = QPushButton("Compare Hashes")
compare_button.clicked.connect(compare_hashes)
compare_button_shortcut = QShortcut(Qt.Key_Return, compare_tab)
compare_button_shortcut.activated.connect(compare_button.click)
compare_layout.addWidget(compare_button, 2, 0)

result_display = QTextEdit()
result_display.setReadOnly(True)
compare_layout.addWidget(result_display, 3, 0)

compare_tab.setLayout(compare_layout)
tab_widget.addTab(compare_tab, "Hash Comparison")

root_layout = QVBoxLayout(root)
root_layout.addWidget(tab_widget)

root.show()

app.exec_()
